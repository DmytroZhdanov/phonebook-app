{"version":3,"file":"static/js/867.01fc93ff.chunk.js","mappings":"gPAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EACtBC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAV,EACpBC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,SAAnB,EACvBC,EAAc,SAAAN,GAAK,OAAIA,EAAMC,SAASM,KAAnB,EAEnBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACV,EAAgBG,IACjB,SAACD,EAAUE,GACT,OAAOF,EAASE,QAAO,SAAAO,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASV,EAAOS,cADf,GAG/B,I,8BCPUE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXf,GAAWgB,EAAAA,EAAAA,IAAYlB,GAE7B,GAAwBmB,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MAEd,OAAQd,GACN,IAAK,OACHQ,EAAQM,GACR,MAEF,IAAK,SACHJ,EAAUI,GAMf,EAmBKC,EAAa,SAAAH,GACjBA,EAAEI,cAAcC,cAAcC,aAC5B,cADF,UAE+B,KAA1BN,EAAEI,cAAcF,MAAe,QAAU,QAE/C,EAEKK,EAAQ,WACZX,EAAQ,IACRE,EAAU,GACX,EAED,OACE,UAAC,KAAD,CAAMU,SA9Ba,SAAAR,GACnBA,EAAES,iBAEF,IAAMC,EAAa,CAAEtB,KAAAA,EAAMS,OAAAA,GACJnB,EAASiC,MAC9B,qBAAGvB,KAAgBC,gBAAkBqB,EAAWtB,KAAKC,aAArD,IAIAuB,MAAM,GAAD,OAAIF,EAAWtB,KAAf,8BAIPI,GAASqB,EAAAA,EAAAA,IAAWH,IACpBH,IACD,EAeC,WACE,UAAC,KAAD,CAAOO,QAAQ,aAAf,UAA4B,QAE1B,SAAC,KAAD,CACEC,KAAK,OACL3B,KAAK,OACL4B,GAAG,aACHC,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUrB,EACVsB,OAAQlB,EACRD,MAAOd,QAGX,UAAC,KAAD,CAAO0B,QAAQ,eAAf,UAA8B,gBAE5B,SAAC,KAAD,CACEC,KAAK,MACL3B,KAAK,SACL4B,GAAG,eACHC,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUrB,EACVsB,OAAQlB,EACRD,MAAOL,QAGX,SAAC,KAAD,CAAQkB,KAAK,SAAb,SAAsB,kBAG3B,E,mBC1FYO,EAAcC,EAAAA,EAAAA,GAAH,4KAUXC,EAAOD,EAAAA,EAAAA,EAAH,4CAIJE,EAAeF,EAAAA,EAAAA,OAAH,iI,UCVZG,EAAU,SAAC,GAA0B,IAAxBtC,EAAuB,EAAvBA,KAAMS,EAAiB,EAAjBA,OAAQmB,EAAS,EAATA,GAChCxB,GAAWC,EAAAA,EAAAA,MAIjB,OACE,UAAC6B,EAAD,YACE,UAACE,EAAD,WACGpC,EAAK,KAAGS,MAEX,SAAC4B,EAAD,CAAcV,KAAK,SAASY,QAPX,kBAAMnC,GAASoC,EAAAA,EAAAA,IAAcZ,GAA7B,EAOjB,UACE,SAAC,MAAD,CAAkBa,KAAK,KAAKC,MAAM,gBAIzC,ECjBYC,EAAc,WACzB,IAAMrD,GAAWgB,EAAAA,EAAAA,IAAYT,GAE7B,OACE,wBACGP,EAASsD,KAAI,YAA2B,IAAxB5C,EAAuB,EAAvBA,KAAMS,EAAiB,EAAjBA,OAAQmB,EAAS,EAATA,GAC7B,OAAO,SAACU,EAAD,CAAkBV,GAAIA,EAAI5B,KAAMA,EAAMS,OAAQA,GAAhCmB,EACtB,KAGN,E,UCTYiB,EAAS,WACpB,IAAMzC,GAAWC,EAAAA,EAAAA,MACXb,GAASc,EAAAA,EAAAA,IAAYf,GAc3B,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAOmC,QAAQ,eAAf,UAA8B,yBAE5B,SAAC,KAAD,CACEC,KAAK,OACLC,GAAG,eACHI,SAnBa,SAAApB,GACnB,IAAQE,EAAUF,EAAEC,OAAZC,MACRV,GAAS0C,EAAAA,EAAAA,GAAUhC,GACpB,EAiBOmB,OAfW,SAAArB,GACjBA,EAAEI,cAAcC,cAAcC,aAC5B,cADF,UAE+B,KAA1BN,EAAEI,cAAcF,MAAe,QAAU,QAE/C,EAWOd,KAAK,SACLc,MAAOtB,QAKhB,E,UCyBD,EAxCiB,WACf,IAAMY,GAAWC,EAAAA,EAAAA,MACXf,GAAWgB,EAAAA,EAAAA,IAAYlB,GACvB2D,GAAUzC,EAAAA,EAAAA,IAAYb,GACtBG,GAAQU,EAAAA,EAAAA,IAAYX,GACpBqD,GAAkB1C,EAAAA,EAAAA,IAAYT,GAMpC,OAJAoD,EAAAA,EAAAA,YAAU,WACR7C,GAAS8C,EAAAA,EAAAA,MACV,GAAE,CAAC9C,KAGF,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAQ,iBACR,SAACD,EAAD,QAEF,UAAC,KAAD,YACE,SAAC,KAAD,UAAQ,aACP4C,IAAW,SAACI,EAAA,EAAD,IACXvD,IAAS,uBAAIA,IACbN,EAAS8D,OAAS,GACjB,iCACE,SAACP,EAAD,IACCG,EAAgBI,OAAS,GACxB,SAACT,EAAD,KAEA,SAAC,KAAD,UAAS,+DAMb,SAAC,KAAD,UAAS,qCAKlB,C,yLCzDYU,EAAYlB,EAAAA,EAAAA,IAAH,0KAWTmB,EAASnB,EAAAA,EAAAA,GAAH,qIAQNoB,EAASpB,EAAAA,EAAAA,GAAH,qIAQNqB,EAAUrB,EAAAA,EAAAA,IAAH,qMAWPsB,EAAUtB,EAAAA,EAAAA,EAAH,qF,uPCrCPkB,EAAYlB,EAAAA,EAAAA,IAAH,+OAeTqB,EAAUrB,EAAAA,EAAAA,IAAH,iMAWPuB,EAAOvB,EAAAA,EAAAA,KAAH,qEAKJwB,EAAQxB,EAAAA,EAAAA,MAAH,kiBAwBLyB,EAAQzB,EAAAA,EAAAA,MAAH,wVAeL0B,EAAS1B,EAAAA,EAAAA,OAAH,mOAaNC,GAAOD,EAAAA,EAAAA,GAAO2B,EAAAA,GAAP3B,CAAH,wG","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.jsx","Pages/Contacts/Contacts.styled.js","components/Form.styled.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Button, Form, Input, Label } from 'components/Form.styled';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { name, number };\n    const matchedContact = contacts.find(\n      ({ name }) => name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (matchedContact) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  const handleBlur = e => {\n    e.currentTarget.parentElement.setAttribute(\n      'data-filled',\n      `${e.currentTarget.value === '' ? 'false' : 'true'}`\n    );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor=\"input-name\">\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id=\"input-name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={name}\n        />\n      </Label>\n      <Label htmlFor=\"input-number\">\n        Phone number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          id=\"input-number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={number}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  height: 40px;\n  padding: 0 8px;\n  &:not(:last-of-type) {\n    border-bottom: 1px solid #efefef;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 14px;\n`;\n\nexport const DeleteButton = styled.button`\n  height: 24px;\n  margin-left: auto;\n  background-color: transparent;\n  padding: 0;\n  border: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactItem, DeleteButton, Text } from './Contact.styled';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactItem>\n      <Text>\n        {name}: {number}\n      </Text>\n      <DeleteButton type=\"button\" onClick={handleDelete}>\n        <RiDeleteBin6Line size=\"20\" color='#C8C8C8'/>\n      </DeleteButton>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => {\n        return <Contact key={id} id={id} name={name} number={number} />;\n      })}\n    </ul>\n  );\n};\n","import { Form, Input, Label } from 'components/Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  const handleBlur = e => {\n    e.currentTarget.parentElement.setAttribute(\n      'data-filled',\n      `${e.currentTarget.value === '' ? 'false' : 'true'}`\n    );\n  };\n\n  return (\n    <Form>\n      <Label htmlFor=\"input-search\">\n        Find contacts by name\n        <Input\n          type=\"text\"\n          id=\"input-search\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          name=\"filter\"\n          value={filter}\n        />\n      </Label>\n    </Form>\n  );\n};\n","import Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport {\n  Container,\n  Message,\n  Title1,\n  Title2,\n  Wrapper,\n} from '../Contacts/Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Wrapper>\n        <Title1>New Contact</Title1>\n        <ContactForm />\n      </Wrapper>\n      <Wrapper>\n        <Title2>Contacts</Title2>\n        {loading && <Loader />}\n        {error && <p>{error}</p>}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            {visibleContacts.length > 0 ? (\n              <ContactList />\n            ) : (\n              <Message>\n                Sorry, we didn't find any contacts matching your query\n              </Message>\n            )}\n          </>\n        ) : (\n          <Message>You don't have any contacts</Message>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Contacts;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  padding: 0 15px;\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n    padding: 0 30px;\n  }\n`;\n\nexport const Title1 = styled.h1`\n  font-size: 28px;\n  line-height: 1.2;\n  font-weight: 700;\n  margin-bottom: 33px;\n  text-align: center;\n`;\n\nexport const Title2 = styled.h2`\n  font-size: 28px;\n  line-height: 1.2;\n  font-weight: 700;\n  margin-bottom: 33px;\n  text-align: center;\n`;\n\nexport const Wrapper = styled.div`\n  border-radius: 30px;\n  background-color: #FFFFFF;\n  padding: 40px 20px 20px;\n  margin: 30px auto 0;\n\n  @media screen and (min-width: 768px){\n    width: 400px;\n  }\n`;\n\nexport const Message = styled.p`\n  color: #a4a4a4;\n  text-align: center;\n  font-size: 14px;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  width: 320px;\n  padding: 0 15px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n    padding: 0 30px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 768px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  border-radius: 30px;\n  background-color: #ffffff;\n  padding: 40px 20px;\n  margin: 30px auto 0;\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n\nexport const Form = styled.form`\n  position: relative;\n  margin: 20px auto;\n`;\n\nexport const Label = styled.label`\n  position: static;\n  height: 60px;\n  display: block;\n  font-size: 18px;\n  color: #a4a4a4;\n  transform: translateX(15px);\n  transition: transform 400ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 400ms cubic-bezier(0.4, 0, 0.2, 1),\n    height 400ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus-within,\n  &[data-filled='true'] {\n    height: 95px;\n    color: #000000;\n    transform: translate(15px, -14px);\n  }\n\n  &:focus-within input,\n  &[data-filled='true'] input {\n    transform: translate(-15px, 10px);\n  }\n`;\n\nexport const Input = styled.input`\n  transform: translate(-15px, -34px);\n  margin-bottom: 10px;\n  padding: 14px 15px;\n  width: 250px;\n  border-radius: 10px;\n  border: 2px solid #efefef;\n  background-color: transparent;\n  transition: transform 400ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  @media screen and (min-width: 768px) {\n    width: 360px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: block;\n  width: 100%;\n  padding: 14px 15px;\n  color: #fff;\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  border-radius: 10px;\n  background: #146b9c;\n  border: none;\n`;\n\nexport const Text = styled(Link)`\n  display: block;\n  color: #a4a4a4;\n  text-align: center;\n  font-size: 14px;\n`;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","handleChange","e","target","value","handleBlur","currentTarget","parentElement","setAttribute","reset","onSubmit","preventDefault","newContact","find","alert","addContact","htmlFor","type","id","pattern","title","required","onChange","onBlur","ContactItem","styled","Text","DeleteButton","Contact","onClick","deleteContact","size","color","ContactList","map","Filter","setFilter","loading","visibleContacts","useEffect","fetchContacts","Loader","length","Container","Title1","Title2","Wrapper","Message","Form","Label","Input","Button","Link"],"sourceRoot":""}